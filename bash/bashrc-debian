# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color)
        color_prompt=yes
        ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
    else
		color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m\] '
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;33m\]\D{%H:%M} \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;30m\]\[\033[01;34m\]\$\[\033[00m\] '
    #PS1='${debian_chroot:+($debian_chroot)}\[\048[01;100m\]\[\033[01;33m\]\D{%H:%M} \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;30m\]\[\033[01;34m\]\$\[\033[00m\] '

	# Custom rainbow bash prompt via kirsle.net/wizards/ps1.html
	#PS1="\[$(tput sgr0)\]\[$(tput bold)\]\[$(tput setaf 1)\][\[$(tput setaf 3)\]\u\[$(tput setaf 2)\]@\[$(tput setaf 4)\]\h \[$(tput setaf 5)\]\W\[$(tput setaf 1)\]]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]\[$(tput sgr0)\]"

	# monokai attempt
	#PS1="\[$(tput sgr0)\]\[$(tput bold)\]\[$(tput setaf 166)\][\[$(tput setaf 3)\]\u\[$(tput setaf 166)\]@\[$(tput setaf 3)\]\h \[$(tput setaf 135)\]\W\[$(tput setaf 166)\]]\[$(tput setaf 2)\]\\$ \[$(tput sgr0)\]\[$(tput sgr0)\]"
    LONGPROMPT="\[\033[00m\]\[$(tput setaf 3)\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$\[$(tput sgr0)\] "
    SHORTPROMPT="\[\033[00m\]\[$(tput setaf 3)\]${debian_chroot:+($debian_chroot)}\W\$\[$(tput sgr0)\] "
    PS1=$LONGPROMPT
else  # no colors
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    PS1='${debian_chroot:+($debian_chroot)}\D{%H:%M} \u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors (UNTESTED!)
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
#   (Found in Bash WSL .bashrc; have yet to test.)
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi



# ChrisB custom stuff
EDITOR=vim
# Add Rust programs, such as installed via `cargo install exa`, to path.
#if ! echo $PATH | grep -q /home/$USER/.cargo/bin
#then
#    PATH="$PATH:/home/$USER/.cargo/bin"
#fi

# For Loading the SSH key (SSH agent)
# https://esc.sh/blog/ssh-agent-windows10-wsl2/
#/usr/bin/keychain --nogui $HOME/.ssh/id_rsa
#source $HOME/.keychain/$HOST-sh

# Default-allow `less` to interpret color.
export LESS=-R

# Execute previous or most-recent-starting-with-pattern commands.
alias r='fc -s'
# Terminal print-out of weather forecast.  `forecast Seattle` to change location.
alias forecast='~/configfiles/scripts/weather.sh'
alias weather='~/configfiles/scripts/weather.sh'


# add Pulumi to the PATH
#export PATH=$PATH:$HOME/.pulumi/bin

# add some firewalk_server binaries to the PATH
#export PATH=$PATH:$HOME/firewalk_server/src/c/bin

if [ -f $HOME/.cargo/env ]; then
    . "$HOME/.cargo/env"
fi
