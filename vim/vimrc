"source $VIMRUNTIME/vimrc_example.vim
"source ./vim81-defaults.vim


"
" Plug plugin section
" From https://github.com/junegunn/vim-plug
" Run `:PlugInstall` inside Vim to install these on any new system.
" PlugUpdate: to install or update.
" PlugClean: Remove unlisted plugins.
" PlugUpgrade: Update Plug.
"
call plug#begin('~/.vim/plugged')

" :ALEDetail to get the full pane.
Plug 'https://github.com/w0rp/ale'

" Color schemes aplenty.
Plug 'https://github.com/chriskempson/base16-vim'

" Put a .editorconfig in a project to get per-project Vim settings.
Plug 'https://github.com/editorconfig/editorconfig-vim'

" fzf fuzzy finder
" Use with :Files command. `map ; :Files<CR>` is a recommended mapping.
"Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug '~/.fzf'

Plug 'https://github.com/airblade/vim-gitgutter'

Plug 'https://github.com/machakann/vim-highlightedyank'

" Lightline (lighter-weight airline alternative).
Plug 'https://github.com/itchyny/lightline.vim'
Plug 'https://github.com/mike-hearn/base16-vim-lightline'

" :NERDTreeToggle
Plug 'https://github.com/preservim/nerdtree'

" Sensible vim is a good source, but maybe not using it directly.
"Plug 'https://github.com/tpope/vim-sensible'

" TOML highlight plugin; nigh-official.  Talk exists about merging it into vim
" itself.
Plug 'https://github.com/cespare/vim-toml', {
    \ 'branch': 'main',
    \ }

" NeoVim-specific

if !has("win32")
" NeoVim requirement for Rust niceties
Plug 'https://github.com/autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do':     'bash install.sh',
    \ }
endif
Plug 'https://github.com/ncm2/ncm2'  " nice auto-complete to work with RLS, etc.
Plug 'https://github.com/roxma/nvim-yarp'  " ncm2 requires this

call plug#end()


" Follow-up plugin setup.

" fzf
"nmap <Leader>f :Files<CR>

" lightline
" See config examples at https://github.com/itchyny/lightline.vim
let g:lightline = { 'colorscheme': 'base16_monokai' }  " or base16_mexico_light
" Could also `ga` for the char value under the cursor, instead of charvaluehex.
let g:lightline.active = {
        \ 'left': [ ['mode', 'paste' ],
        \           [ 'readonly', 'filename', 'modified' ] ],
        \ 'right': [ [ 'lineinfo' ],
        \            [ 'charvaluehex' ],
        \            [ 'fileformat', 'fileencoding' ] ]
        \ }
let g:lightline.component = {
        \ 'charvaluehex': '0x%02.2B'
        \ }
"let g:lightline.tabline = { 'left': [ ['tabs'] ], 'right': [ ['close'] ] }


" Follow-up nvim-specific plugin setup.

" LanguageClient-neovim
" Required for operations modifying multiple buffers like rename.
set hidden
let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/local/bin/pyls'],
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    \ }
"nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K    :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd   :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

if has('nvim')
" ncm2
" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()
" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect
" NOTE: you need to install completion sources to get completions.  Check our
" wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
"Plug 'https://github.com/ncm2/ncm2-bufword'
"Plug 'https://github.com/ncm2/ncm2-path'

" optional ncm2 tips
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not
" found' messages
set shortmess+=c
" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
inoremap <c-c> <ESC>
" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu.  Use this mapping to close the menu and start a new line.
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
" Use <TAB> to select the popup menu:
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" wrap existing omnifunc
" Note that omnifunc does not run in background and may probably block the
" editor.  If you don't want to be blocked by omnifunc too often, you could
" add 180ms delay before the omni wrapper:
"  'on_complete': ['ncm2#on_complete#delay', 180,
"               \  'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
" (instead of)
"  'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
au User Ncm2Plugin call ncm2#register_source({
    \ 'name': 'css',
    \ 'priority': 9,
    \ 'subscope_enable': 1,
    \ 'scope': ['css,scss'],
    \ 'mark': 'css',
    \ 'word_pattern': '[\w\-]+',
    \ 'complete_pattern': ':\s*',
    \ 'on_complete': ['ncm2#on_complete#delay', 180,
    \                 'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
    \ })

" ncm2 autocomplete fixes from Jon Gjengset (if the above ones don't work well)
" https://youtu.be/ycMiMDHopNc?t=1229
" tab to select
" and don't hijack my enter key
"inoremap <expr><Tab> (pumvisible()?(empty(v:completed_item)?"\<C-n>":"\<C-y>"):"\<Tab>")
"inoremap <expr><CR>  (pumvisible()?(empty(v:completed_item)?"\<CR>\<CR>":"\<C-y>"):"\<CR>")
endif  " has('nvim')



"
" Normal vim settings
"

filetype plugin indent on

set backspace=indent,start,eol

set number
set relativenumber
"set cursorline  # too expensive in some cases

" Always show the status-line.  If using lightline/airline/powerline, this is good.
set laststatus=2
" Since we have a status line showing the mode, don't bother doing so in the
" line below it.
set noshowmode

" jk as escape key
inoremap jk <esc>

" Visual autocomplete for command menu
"set wildmenu
" Ignore compiled files
"set wildignore=*.o,*~,*.pyc

" Ignore case when searching, smartly
set ignorecase
set smartcase

set hlsearch
set incsearch

" Show as much of the last line of text as possible ('@@@' represents
" truncation), and show unprintable chars as hex <xx> instead of ^C and ~C.
set display=lastline,uhex

" Allow putting the cursor on the very first and last lines and columns.
set scrolloff=0
set sidescrolloff=0

" Don't redraw while executing macros
"set lazyredraw

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"""
""" Colors and Fonts
"""

"syntax on
syntax enable

set background=dark
"colorscheme badwolf
colorscheme base16-monokai
if has('termguicolors')
    set termguicolors  " fixes color scheme for bash WSL in Cmder.  To be tested on *nix.

    " fix for tmux
    if &term =~# '^screen-256color'
      "let &t_8f = "^[[38;2;%lu;%lu;%lum"
      "let &t_8b = "^[[48;2;%lu;%lu;%lum"
      "let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
      "let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
      " Suggested fixes for vim in tmux aren't working.
      " This might be gross in some way, but it's fine enough for me for now.
      let &term = "xterm-256color"
    endif
endif

" Ensure legible font in gVim
if has("gui_running")
    if has("win32") || has("win16") " Windows gVim
        set guifont=Consolas:h11:cANSI:qDRAFT
    endif
endif


"""
""" Tabs and Formatting
"""

set expandtab
"set smarttab " tab inserts tabs for indents, space otherwise
set shiftwidth=4
set tabstop=4
set softtabstop=4

" Auto and smart indent
"set copyindent
"set autoindent  " trying out cindent instead for a bit.
"set smartindent  " trying out cindent instead for a bit.
set cindent

" Don't auto-continue comments quite so much ('ro' not present).
" :h 'formatoptions'
" :h fo-table
set formatoptions=tcrqanljp
" Fix our formatoptions after filetype plugins mess with them.
autocmd BufNewFile,BufRead * setlocal formatoptions=crqnlj
autocmd BufNewFile,BufRead *.uplugin setlocal ft=json
autocmd BufNewFile,BufRead *.uproject setlocal ft=json

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries.
if has('win32')
  set guioptions-=t
endif

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1
endif

" Fix colors in tmux (thanks Sam).
if &term =~ '256color'
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

"""
""" Jump to last position when opening a file.
""" Affects git commit messages as well.
""" https://unix.stackexchange.com/questions/23335/how-to-open-a-file-in-the-last-closed-position-in-vi
"""
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
"""
""" Git commit messages should always put the cursor at the beginning.
"""
autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])


"""
""" Syntastic plugin
""" bundle/syntastic
""" :help syntastic
"""

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list            = 1
"let g:syntastic_check_on_open            = 1
"let g:syntastic_check_on_wq              = 0

" jump to next/previous errors (may not be Syntastic-specific?)
"nnoremap <leader>n :lnext<CR>
"nnoremap <leader>p :lprevious<CR>


"""
""" vim-gitgutter
""" https://github.com/airblade/vim-gitgutter
"""

" Hotkeys and commands
" You can jump between hunks with [c and ]c.
" Both of those take a preceding count.
" You can preview, stage, and undo hunks with <leader>hp, <leader>hs, and
" <leader>hu respectively.
" You cannot unstage a staged hunk.
"
" :GitGutterToggle

" Cut update time down from default 4000 (4 seconds) to 100 ms.
"set updatetime=100


"""
""" Some stuff from https://github.com/jonhoo/configs/
"""

" Keep undo info around in a special dir.  So you can undo after closing and
" re-opening a file.
set undodir=~/.vimdid
set undofile


"""
""" leaders
"""

" Change leader from backslash to spacebar.
let g:mapleader = " "
" toggle file tree with leader-t
nnoremap <Leader>t :NERDTreeToggle<CR>
" switch back to previous buffer
nnoremap <Leader><Leader> <C-^>
" clear search
"nnoremap <Leader>/ :let @/ = ''<CR>
" clear search until next occurs
nnoremap <Leader>/ :nohlsearch<CR>

if exists('g:loaded_fzf')
    " fzf from the root of the git directory
    function! FzfGitRootOrHere()
        silent let l:path = system('[[ $(git rev-parse --show-toplevel 2>/dev/null) && $? -eq 0 ]] && echo $(git rev-parse --show-toplevel) || pwd')
        let l:path = fnamemodify(l:path, ':~:.')[:-2]
        " TODO: fzf#wrap isn't getting us split hotkeys for some reason.
        "let g:fzf_action = {
        "    \ 'ctrl-t': 'tab split',
        "    \ 'ctrl-x': 'split',
        "    \ 'ctrl-v': 'vsplit' }
        call fzf#run(fzf#wrap({'dir': l:path, 'sink': 'e'}))
        "return l:path
    endfunction
    nnoremap <Leader>f :call FzfGitRootOrHere()<CR>
    "nnoremap <Leader>f :echom GitRootOrHere()<CR>
endif

