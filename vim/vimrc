"source $VIMRUNTIME/vimrc_example.vim
"source ./vim81-defaults.vim


"
" Plug plugin section
" From https://github.com/junegunn/vim-plug
" Run `:PlugInstall` inside Vim to install these on any new system.
" PlugUpdate: to install or update.
" PlugClean: Remove unlisted plugins.
" PlugUpgrade: Update Plug.
"
call plug#begin('~/.vim/plugged')

" :ALEDetail to get the full pane.
Plug 'https://github.com/w0rp/ale'

" Color schemes aplenty.
Plug 'https://github.com/chriskempson/base16-vim'

" Put a .editorconfig in a project to get per-project Vim settings.
Plug 'https://github.com/editorconfig/editorconfig-vim'

" fzf fuzzy finder
" Use with :Files command. `map ; :Files<CR>` is a recommended mapping.
"Plug 'https://github.com/airblade/vim-rooter'
"Plug 'https://github.com/junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
Plug '~/.fzf'
"Plug 'junegunn/fzf.vim'

Plug 'https://github.com/airblade/vim-gitgutter'

Plug 'https://github.com/machakann/vim-highlightedyank'

" Lightline (lighter-weight airline alternative).
Plug 'https://github.com/itchyny/lightline.vim'
Plug 'https://github.com/mike-hearn/base16-vim-lightline'

" :NERDTreeToggle
Plug 'https://github.com/scrooloose/nerdtree'

" Sensible vim is a good source, but maybe not using it directly.
"Plug 'https://github.com/tpope/vim-sensible'

call plug#end()

" Follow-up plugin setup.
" fzf
"nmap <Leader>f :Files<CR>

" lightline
" See config examples at https://github.com/itchyny/lightline.vim
let g:lightline = { 'colorscheme': 'base16_monokai' }  " or base16_mexico_light
" Could also `ga` for the char value under the cursor, instead of charvaluehex.
let g:lightline.active = {
        \ 'left': [ ['mode', 'paste' ],
        \           [ 'readonly', 'filename', 'modified' ] ],
        \ 'right': [ [ 'lineinfo' ],
        \            [ 'charvaluehex' ],
        \            [ 'fileformat', 'fileencoding' ] ]
        \ }
let g:lightline.component = {
        \ 'charvaluehex': '0x%02.2B'
        \ }
"let g:lightline.tabline = { 'left': [ ['tabs'] ], 'right': [ ['close'] ] }


"
" Normal vim settings
"

filetype plugin indent on

set backspace=indent,start,eol

set number
set relativenumber
"set cursorline  # too expensive in some cases

" Always show the status-line.  If using lightline/airline/powerline, this is good.
set laststatus=2
" Since we have a status line showing the mode, don't bother doing so in the
" line below it.
set noshowmode

" jk as escape key
inoremap jk <esc>

" Visual autocomplete for command menu
"set wildmenu
" Ignore compiled files
"set wildignore=*.o,*~,*.pyc

" Ignore case when searching, smartly
set ignorecase
set smartcase

set hlsearch
set incsearch

" Show as much of the last line of text as possible ('@@@' represents
" truncation), and show unprintable chars as hex <xx> instead of ^C and ~C.
set display=lastline,uhex

" Allow putting the cursor on the very first and last lines and columns.
set scrolloff=0
set sidescrolloff=0

" Don't redraw while executing macros
"set lazyredraw

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"""
""" Colors and Fonts
"""

"syntax on
syntax enable

set background=dark
"colorscheme badwolf
colorscheme base16-monokai
set termguicolors  " fixes color scheme for bash WSL in Cmder.  To be tested on *nix.


"""
""" Tabs
"""

set expandtab
"set smarttab " tab inserts tabs for indents, space otherwise
set shiftwidth=4
set tabstop=4
set softtabstop=4

" Auto and smart indent
"set copyindent
"set autoindent  " trying out cindent instead for a bit.
"set smartindent  " trying out cindent instead for a bit.
set cindent

" Don't auto-continue comments quite so much ('ro' not present).
" :h 'formatoptions'
" :h fo-table
set formatoptions=crqnlj
" Fix our formatoptions after filetype plugins mess with them.
autocmd BufNewFile,BufRead * setlocal formatoptions=crqnlj

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries.
if has('win32')
  set guioptions-=t
endif

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1
endif


"""
""" Syntastic plugin
""" bundle/syntastic
""" :help syntastic
"""

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list            = 1
"let g:syntastic_check_on_open            = 1
"let g:syntastic_check_on_wq              = 0

" jump to next/previous errors (may not be Syntastic-specific?)
"nnoremap <leader>n :lnext<CR>
"nnoremap <leader>p :lprevious<CR>


"""
""" vim-gitgutter
""" https://github.com/airblade/vim-gitgutter
"""

" Hotkeys and commands
" You can jump between hunks with [c and ]c.
" Both of those take a preceding count.
" You can preview, stage, and undo hunks with <leader>hp, <leader>hs, and
" <leader>hu respectively.
" You cannot unstage a staged hunk.
"
" :GitGutterToggle

" Cut update time down from default 4000 (4 seconds) to 100 ms.
"set updatetime=100


"""
""" Some stuff from https://github.com/jonhoo/configs/
"""

" Keep undo info around in a special dir.  So you can undo after closing and
" re-opening a file.
set undodir=~/.vimdid
set undofile


"""
""" leaders
"""

" Change leader from backslash to spacebar.
let g:mapleader = " "
" toggle file tree with leader-t
nnoremap <Leader>t :NERDTreeToggle<CR>
" switch back to previous buffer
nnoremap <Leader><Leader> <C-^>
" clear search
"nnoremap <Leader>/ :let @/ = ''<CR>
" clear search until next occurs
nnoremap <Leader>/ :nohlsearch<CR>

" fzf from the root of the git directory
function! GitRootOrHere()
    silent let l:path = system('[[ $(git rev-parse --show-toplevel 2>/dev/null) && $? -eq 0 ]] && echo $(git rev-parse --show-toplevel) || pwd')
    let l:path = fnamemodify(l:path, ':~:.')[:-2]
    call fzf#run({'sink': 'e', 'dir': l:path, 'window': 'belowright 30new'})
    "return l:path
endfunction
nnoremap <Leader>f :call GitRootOrHere()<CR>
"nnoremap <Leader>f :echom GitRootOrHere()<CR>

